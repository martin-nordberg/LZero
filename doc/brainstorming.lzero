

/*
 *  L-Zero Syntax:

    element
        : declaration
        : expression
        ;


    annotation
        : "@" qualifiedName argumentList?
        ;

    annotationList
        : annotation*
        ;

    argument
        : (simpleName "=")? expression
        ;

    argumentList
        : "(" ( argument ("," argument)* )? ")"
        ;

    concept
        : "#" qualifiedName
        ;

    connectedElement
        : qualifiedName
        | uuid
        | "[" element* "]"
        ;

    connectionList
        : implicitConnection+ explicitConnection* (containment | valueAssignment)?
        | explicitConnection+ (containment | valueAssignment)?
        | containment
        | valueAssignment
        | semicolonOrNewLine
        ;

    containment
        : "{" element* "}"
        ;

    declaration
        : documentation? annotationList concept qualifiedName? uuid? parameterList? connectionList
        ;

    documentation
        : DOCUMENTATION
        ;

    explicitConnection
        : "~" qualifiedName argumentList? "~" connectedElement
        | "~" qualifiedName argumentList? "~>" connectedElement
        | "<~" qualifiedName argumentList? "~" connectedElement
        ;

    expression
        : reference
        | literal
        ;

    implicitConnection
        : ":" connectedElement
        ;

    literal
        : documentation?
          ( BOOLEAN_LITERAL |
            CHARACTER_LITERAL |
            FLOATING_POINT_LITERAL |
            INTEGER_LITERAL |
            STRING_LITERAL )
        ;

    parameter
        : simpleName implicitConnection
        ;

    parameterList
        : "(" ( parameter ("," parameter)* )? ")"
        ;

    qualifiedName
        : simpleName ("." simpleName)*
        ;

    reference
        : documentation? (qualifiedName | uuid) argumentList? valueAssignment?
        ;

    semicolonOrNewLine
        : ";"
        | /* next token occurs on new line */
        ;

    simpleName
        : IDENTIFIER
        ;

    uuid
        : UUID
        ;

    valueAssignment
        : "=" expression
        ;


    DOCUMENTATION
        : "/*" ([^*] | "*" [^/])* "*/"
        ;

    IDENTIFIER
        : [A-Za-z_] [A-Za-z_0-9]*
        | "`" [^`]* "`"
        ;

    UUID
        : "%" [A-Fa-f0-9]{8} "-" [A-Fa-f0-9]{4} "-" [A-Fa-f0-9]{4} "-" [A-Fa-f0-9]{4} "-" [A-Fa-f0-9]{12}
        ;

*/

#package example {

    #function q(x:Int,y:Double) ~returns~ Double {
        pow(y, x)
    }

    @public #class Sample(T: Type, a:Int, b: String) {

        /* Computes the square of its argument [x]. */
        @public #function f(x:Int) : Int =
            times( x, x )

        /*
           Just some funky text string.
           It has an initializer.
        */
        @private #field q : String = "Very nice."

        /* Function that can be called from derived classes. */
        @protected #function g %1111-11111111-11111111-1111-1111 (s:String) {
            #val result = concat(s, " whatever")
            result
        }

    }

    #object x ~extends~ Sample(T)(a=3, b=4) {
        #collection children: List(String) {
            "q"
            "r"
        }
    }

}

/* sample connection of packages */
#package example.sample
    ~uses~> somelibrary.goodstuff
    ~uses(exported=true)~> anotherlib.badstuff

#package example.sample
    ~uses~> [ somelibrary.goodstuff; anotherlib.badstuff ]

