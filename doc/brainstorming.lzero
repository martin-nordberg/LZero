

/*
 *  Sole syntax:
 *
 *  element
 *    : documentation? annotations? concept qualifiedName? uuid? ( "(" parameters? ")" )? ( connections | ";" )
 *    ;
 *
 *  documentation
 *    : documentationLine+
 *    ;
 *
 *  documentationLine
 *    : "!" [^\n]* "\n"
 *    ;
 *
 *  annotations
 *    : annotation+
 *    ;
 *
 *  annotation
 *    : identifier ( "(" arguments ")" )?
 *    ;
 *
 *  concept
 *    : CONCEPT_KEYWORD
 *    ;
 *
 *  qualifiedName
 *    : name ( "." name )*
 *    ;
 *
 *  name
 *    : IDENTIFIER
 *    ;
 *
 *  parameters
 *    : parameter ( "," parameter )*
 *    ;
 *
 *  parameter
 *    : identifier ( ":" type )? ( "=" expression )?
 *    ;
 *
 *  type
 *    : identifier ( "(" arguments ")" )?
 *    ;
 *
 *  connections
 *    : connection+ containment?
 *    : containment
 *    ;
 *
 *  connection
 *    : CONNECTOR_KEYWORD ( "(" parameters? ")" )? "~" connected
 *    : ":" connected
 *    ;
 *
 *  connected
 *    : qualifiedName
 *    : uuid
 *    : "[" ( element ","? )* "]"
 *    : "(" expression  ")"
 *    ;
 *
 *  containment
 *    : "{" element "}"
 *    : "=" expression
 *    ;
 *
 *  arguments
 *    : argument ( "," argument )*
 *    ;
 *
 *  argument
 *    : ( identifier "=" )? expression
 *    ;
 *
 *  expression
 *    : // TODO
 *    ;
 *
 *
 *  CONCEPT_KEYWORD
 *    : "#" IDENTIFIER
 *    ;
 *
 *  CONNECTOR_KEYWORD
 *    : "~" IDENTIFIER
 *    ;
 *
 *  IDENTIFIER
 *    : [A-Za-z_] [A-Za-z_0-9]*
 *    : "`" [^`]* "`"
 *    ;
 *
 *  UUID
 *    : "%" [A-Fa-f0-9]{8} "-" [A-Fa-f0-9]{4} "-" [A-Fa-f0-9]{4} "-" [A-Fa-f0-9]{4} "-" [A-Fa-f0-9]{12}
 *    ;
 */


#package example {

    #function q(x:Int,y:Double) ~returns~ Double {
        pow(y, x)
    }

    public #class Sample(T: Type, a:Int, b: String) {

        /* Computes the square of its argument [x]. */
        public #function f(x:Int) : Int =
            times( x, x )

        /*
           Just some funky text string.
           It has an initializer.
        */
        private #field q : String = "Very nice."

        /* Function that can be called from derived classes. */
        protected #function g %1111-11111111-11111111-1111-1111 (s:String) {
            #let result = s + " whatever"
            #return result
        }

    }

    #object x ~extends~ Sample(T)(a=3, b=4) {
        #collection children: List(String) {
            "q"
            "r"
        }
    }

}

/* sample connection of packages */
#package example.sample
    ~uses~ somelibrary.goodstuff
    ~uses~ anotherlib.badstuff

